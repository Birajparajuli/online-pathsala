datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  USER
  TEACHER
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Course has a many-to-one relationship with Category.
// Course has a one-to-many relationship with Attachment.
// Course has a one-to-many relationship with Chapter.
// Course has a one-to-many relationship with Purchase.

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  totalRating Float?  @default(0)
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters         Chapter[]
  attachments      Attachment[]
  purchases        Purchase[]
  courseRatting    CourseRatting[]
  approvalStatus   ApprovalStatus  @default(PENDING)
  approvalMessages String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([categoryId])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// Category has a one-to-many relationship with Course  

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

// Attachment has a many-to-one relationship with Course

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// Chapter has a many-to-one relationship with Course  
// Chapter has a one-to-one relationship with MuxData  

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[] //array

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// MuxData has a one-to-one relationship with Chapter  

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

// UserProgress has a many-to-one relationship with Chapter (many user progresses can be associated with one chapter).
// UserProgress has a unique constraint on the combination of userId and chapterId, ensuring a user can mark a chapter as completed only once.

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

// Purchase has a many-to-one relationship with Course 
// Purchase has a unique constraint on the combination of userId and courseId, ensuring a user can purchase a course only once.

model Purchase {
  id            String   @id @default(uuid())
  userId        String
  courseId      String
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
  paymentMethod String?
  paymentStatus String?
  paymentId     String?  @unique
  totalAmount   Float?

  @@unique([userId, courseId])
  @@index([courseId])
}

model CourseRatting {
  id        String   @id @default(uuid())
  rating    Float?
  review    String?  @db.Text
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}
